// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const blockUserByID = `-- name: BlockUserByID :one
update users
set is_blocked = true
where id = $1
returning id, name, email, phone, password, role, is_blocked, gst_no, about, created_at, updated_at
`

func (q *Queries) BlockUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.blockUserByIDStmt, blockUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.IsBlocked,
		&i.GstNo,
		&i.About,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllUsers = `-- name: GetAllUsers :many
select id, name, email, phone, password, role, is_blocked, gst_no, about, created_at, updated_at from users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Password,
			&i.Role,
			&i.IsBlocked,
			&i.GstNo,
			&i.About,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOTPByUserID = `-- name: GetOTPByUserID :one
select id, user_id, otp, created_at, expires_at from login_otps
where user_id = $1
order by created_at desc
limit 1
`

func (q *Queries) GetOTPByUserID(ctx context.Context, userID uuid.UUID) (LoginOtp, error) {
	row := q.queryRow(ctx, q.getOTPByUserIDStmt, getOTPByUserID, userID)
	var i LoginOtp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Otp,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select id, name, email, phone, password, role, is_blocked, gst_no, about, created_at, updated_at from users
where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.IsBlocked,
		&i.GstNo,
		&i.About,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :many
select id, name, email, phone, password, role, is_blocked, gst_no, about, created_at, updated_at from users
where id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) ([]User, error) {
	rows, err := q.query(ctx, q.getUserByIdStmt, getUserById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Password,
			&i.Role,
			&i.IsBlocked,
			&i.GstNo,
			&i.About,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUsersByRole = `-- name: GetUsersByRole :many
select id, name, email, phone, password, role, is_blocked, gst_no, about, created_at, updated_at from users
where role = $1
`

func (q *Queries) GetUsersByRole(ctx context.Context, role string) ([]User, error) {
	rows, err := q.query(ctx, q.getUsersByRoleStmt, getUsersByRole, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Password,
			&i.Role,
			&i.IsBlocked,
			&i.GstNo,
			&i.About,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertUser = `-- name: InsertUser :one
insert into users
(name, email, phone, password, role, gst_no, about)
values ($1, $2, $3, $4, $5, $6, $7)
returning id, name, email, phone, password, role, is_blocked, gst_no, about, created_at, updated_at
`

type InsertUserParams struct {
	Name     string         `json:"name"`
	Email    string         `json:"email"`
	Phone    int64          `json:"phone"`
	Password string         `json:"password"`
	Role     string         `json:"role"`
	GstNo    sql.NullString `json:"gstNo"`
	About    sql.NullString `json:"about"`
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.queryRow(ctx, q.insertUserStmt, insertUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
		arg.Role,
		arg.GstNo,
		arg.About,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.IsBlocked,
		&i.GstNo,
		&i.About,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const unblockUserByID = `-- name: UnblockUserByID :one
update users
set is_blocked = false
where id = $1
returning id, name, email, phone, password, role, is_blocked, gst_no, about, created_at, updated_at
`

func (q *Queries) UnblockUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.unblockUserByIDStmt, unblockUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.IsBlocked,
		&i.GstNo,
		&i.About,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
