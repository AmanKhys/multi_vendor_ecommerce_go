// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addAndVerifyUser = `-- name: AddAndVerifyUser :one
insert into users
(name, email, password, role, email_verified, user_verified, updated_at)
values  ($1, $2, $3, 'user', true, true, current_timestamp)
returning id, name, email, role, is_blocked, email_verified, user_verified
`

type AddAndVerifyUserParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type AddAndVerifyUserRow struct {
	ID            uuid.UUID `json:"id"`
	Name          string    `json:"name"`
	Email         string    `json:"email"`
	Role          string    `json:"role"`
	IsBlocked     bool      `json:"is_blocked"`
	EmailVerified bool      `json:"email_verified"`
	UserVerified  bool      `json:"user_verified"`
}

func (q *Queries) AddAndVerifyUser(ctx context.Context, arg AddAndVerifyUserParams) (AddAndVerifyUserRow, error) {
	row := q.queryRow(ctx, q.addAndVerifyUserStmt, addAndVerifyUser, arg.Name, arg.Email, arg.Password)
	var i AddAndVerifyUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
	)
	return i, err
}

const addSeller = `-- name: AddSeller :one
INSERT INTO users
(name, email, phone, password, role, gst_no, about)
VALUES ($1, $2, $3, $4, 'seller', $5, $6)
RETURNING id, name, email, phone, role, is_blocked, email_verified, user_verified, gst_no, about
`

type AddSellerParams struct {
	Name     string         `json:"name"`
	Email    string         `json:"email"`
	Phone    sql.NullInt64  `json:"phone"`
	Password string         `json:"password"`
	GstNo    sql.NullString `json:"gst_no"`
	About    sql.NullString `json:"about"`
}

type AddSellerRow struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Phone         sql.NullInt64  `json:"phone"`
	Role          string         `json:"role"`
	IsBlocked     bool           `json:"is_blocked"`
	EmailVerified bool           `json:"email_verified"`
	UserVerified  bool           `json:"user_verified"`
	GstNo         sql.NullString `json:"gst_no"`
	About         sql.NullString `json:"about"`
}

func (q *Queries) AddSeller(ctx context.Context, arg AddSellerParams) (AddSellerRow, error) {
	row := q.queryRow(ctx, q.addSellerStmt, addSeller,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
		arg.GstNo,
		arg.About,
	)
	var i AddSellerRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
		&i.GstNo,
		&i.About,
	)
	return i, err
}

const addUser = `-- name: AddUser :one
INSERT INTO users
(name, email, phone, password, role)
VALUES ($1, $2, $3, $4, 'user')
RETURNING id, name, email, phone, role, is_blocked, email_verified, user_verified
`

type AddUserParams struct {
	Name     string        `json:"name"`
	Email    string        `json:"email"`
	Phone    sql.NullInt64 `json:"phone"`
	Password string        `json:"password"`
}

type AddUserRow struct {
	ID            uuid.UUID     `json:"id"`
	Name          string        `json:"name"`
	Email         string        `json:"email"`
	Phone         sql.NullInt64 `json:"phone"`
	Role          string        `json:"role"`
	IsBlocked     bool          `json:"is_blocked"`
	EmailVerified bool          `json:"email_verified"`
	UserVerified  bool          `json:"user_verified"`
}

func (q *Queries) AddUser(ctx context.Context, arg AddUserParams) (AddUserRow, error) {
	row := q.queryRow(ctx, q.addUserStmt, addUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
	)
	var i AddUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
	)
	return i, err
}

const blockUserByID = `-- name: BlockUserByID :one
UPDATE users
SET is_blocked = true, updated_at = current_timestamp
WHERE id = $1
RETURNING id, name, email, phone, role, is_blocked
`

type BlockUserByIDRow struct {
	ID        uuid.UUID     `json:"id"`
	Name      string        `json:"name"`
	Email     string        `json:"email"`
	Phone     sql.NullInt64 `json:"phone"`
	Role      string        `json:"role"`
	IsBlocked bool          `json:"is_blocked"`
}

func (q *Queries) BlockUserByID(ctx context.Context, id uuid.UUID) (BlockUserByIDRow, error) {
	row := q.queryRow(ctx, q.blockUserByIDStmt, blockUserByID, id)
	var i BlockUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
	)
	return i, err
}

const changeNameByUserID = `-- name: ChangeNameByUserID :exec
update users
set name = $2
where id = $1
`

type ChangeNameByUserIDParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

func (q *Queries) ChangeNameByUserID(ctx context.Context, arg ChangeNameByUserIDParams) error {
	_, err := q.exec(ctx, q.changeNameByUserIDStmt, changeNameByUserID, arg.ID, arg.Name)
	return err
}

const changePasswordByUserID = `-- name: ChangePasswordByUserID :exec
update users
set password = $2
where id = $1
`

type ChangePasswordByUserIDParams struct {
	ID       uuid.UUID `json:"id"`
	Password string    `json:"password"`
}

func (q *Queries) ChangePasswordByUserID(ctx context.Context, arg ChangePasswordByUserIDParams) error {
	_, err := q.exec(ctx, q.changePasswordByUserIDStmt, changePasswordByUserID, arg.ID, arg.Password)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, name, email, phone, role, is_blocked, email_verified, user_verified, gst_no, about FROM users
`

type GetAllUsersRow struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Phone         sql.NullInt64  `json:"phone"`
	Role          string         `json:"role"`
	IsBlocked     bool           `json:"is_blocked"`
	EmailVerified bool           `json:"email_verified"`
	UserVerified  bool           `json:"user_verified"`
	GstNo         sql.NullString `json:"gst_no"`
	About         sql.NullString `json:"about"`
}

func (q *Queries) GetAllUsers(ctx context.Context) ([]GetAllUsersRow, error) {
	rows, err := q.query(ctx, q.getAllUsersStmt, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersRow{}
	for rows.Next() {
		var i GetAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Role,
			&i.IsBlocked,
			&i.EmailVerified,
			&i.UserVerified,
			&i.GstNo,
			&i.About,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersByRoleSeller = `-- name: GetAllUsersByRoleSeller :many
SELECT id, name, email, phone, role, is_blocked, email_verified, user_verified, about, gst_no FROM users
WHERE role = $1
`

type GetAllUsersByRoleSellerRow struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Phone         sql.NullInt64  `json:"phone"`
	Role          string         `json:"role"`
	IsBlocked     bool           `json:"is_blocked"`
	EmailVerified bool           `json:"email_verified"`
	UserVerified  bool           `json:"user_verified"`
	About         sql.NullString `json:"about"`
	GstNo         sql.NullString `json:"gst_no"`
}

func (q *Queries) GetAllUsersByRoleSeller(ctx context.Context, role string) ([]GetAllUsersByRoleSellerRow, error) {
	rows, err := q.query(ctx, q.getAllUsersByRoleSellerStmt, getAllUsersByRoleSeller, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersByRoleSellerRow{}
	for rows.Next() {
		var i GetAllUsersByRoleSellerRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Role,
			&i.IsBlocked,
			&i.EmailVerified,
			&i.UserVerified,
			&i.About,
			&i.GstNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersByRoleUser = `-- name: GetAllUsersByRoleUser :many
SELECT id, name, email, phone, role, is_blocked, email_verified, user_verified FROM users
WHERE role = $1
`

type GetAllUsersByRoleUserRow struct {
	ID            uuid.UUID     `json:"id"`
	Name          string        `json:"name"`
	Email         string        `json:"email"`
	Phone         sql.NullInt64 `json:"phone"`
	Role          string        `json:"role"`
	IsBlocked     bool          `json:"is_blocked"`
	EmailVerified bool          `json:"email_verified"`
	UserVerified  bool          `json:"user_verified"`
}

func (q *Queries) GetAllUsersByRoleUser(ctx context.Context, role string) ([]GetAllUsersByRoleUserRow, error) {
	rows, err := q.query(ctx, q.getAllUsersByRoleUserStmt, getAllUsersByRoleUser, role)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllUsersByRoleUserRow{}
	for rows.Next() {
		var i GetAllUsersByRoleUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Phone,
			&i.Role,
			&i.IsBlocked,
			&i.EmailVerified,
			&i.UserVerified,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSellerByProductID = `-- name: GetSellerByProductID :one
SELECT u.id, u.name, u.email, u.phone, u.role, u.is_blocked, u.email_verified, u.user_verified, u.gst_no, u.about
FROM  products p
INNER JOIN  users u
on p.seller_id = u.id and u.role = 'seller' and p.is_deleted = false
where p.id = $1
`

type GetSellerByProductIDRow struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Phone         sql.NullInt64  `json:"phone"`
	Role          string         `json:"role"`
	IsBlocked     bool           `json:"is_blocked"`
	EmailVerified bool           `json:"email_verified"`
	UserVerified  bool           `json:"user_verified"`
	GstNo         sql.NullString `json:"gst_no"`
	About         sql.NullString `json:"about"`
}

func (q *Queries) GetSellerByProductID(ctx context.Context, id uuid.UUID) (GetSellerByProductIDRow, error) {
	row := q.queryRow(ctx, q.getSellerByProductIDStmt, getSellerByProductID, id)
	var i GetSellerByProductIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
		&i.GstNo,
		&i.About,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, phone, role, is_blocked, email_verified, user_verified, gst_no, about FROM users
WHERE email = $1
`

type GetUserByEmailRow struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Phone         sql.NullInt64  `json:"phone"`
	Role          string         `json:"role"`
	IsBlocked     bool           `json:"is_blocked"`
	EmailVerified bool           `json:"email_verified"`
	UserVerified  bool           `json:"user_verified"`
	GstNo         sql.NullString `json:"gst_no"`
	About         sql.NullString `json:"about"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
		&i.GstNo,
		&i.About,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, name, email, phone, role, is_blocked, email_verified, user_verified, gst_no, about FROM users
WHERE id = $1
`

type GetUserByIdRow struct {
	ID            uuid.UUID      `json:"id"`
	Name          string         `json:"name"`
	Email         string         `json:"email"`
	Phone         sql.NullInt64  `json:"phone"`
	Role          string         `json:"role"`
	IsBlocked     bool           `json:"is_blocked"`
	EmailVerified bool           `json:"email_verified"`
	UserVerified  bool           `json:"user_verified"`
	GstNo         sql.NullString `json:"gst_no"`
	About         sql.NullString `json:"about"`
}

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (GetUserByIdRow, error) {
	row := q.queryRow(ctx, q.getUserByIdStmt, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
		&i.GstNo,
		&i.About,
	)
	return i, err
}

const getUserWithPasswordByEmail = `-- name: GetUserWithPasswordByEmail :one
SELECT id, name, email, phone, password, role, email_verified, user_verified, is_blocked, gst_no, about, created_at, updated_at FROM users
WHERE email = $1
`

func (q *Queries) GetUserWithPasswordByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserWithPasswordByEmailStmt, getUserWithPasswordByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.Role,
		&i.EmailVerified,
		&i.UserVerified,
		&i.IsBlocked,
		&i.GstNo,
		&i.About,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const unblockUserByID = `-- name: UnblockUserByID :one
UPDATE users
SET is_blocked = false, updated_at = current_timestamp
WHERE id = $1
RETURNING id, name, email, phone, role, is_blocked
`

type UnblockUserByIDRow struct {
	ID        uuid.UUID     `json:"id"`
	Name      string        `json:"name"`
	Email     string        `json:"email"`
	Phone     sql.NullInt64 `json:"phone"`
	Role      string        `json:"role"`
	IsBlocked bool          `json:"is_blocked"`
}

func (q *Queries) UnblockUserByID(ctx context.Context, id uuid.UUID) (UnblockUserByIDRow, error) {
	row := q.queryRow(ctx, q.unblockUserByIDStmt, unblockUserByID, id)
	var i UnblockUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
	)
	return i, err
}

const verifySellerByID = `-- name: VerifySellerByID :one
update users
set user_verified = true, updated_at = current_timestamp
where id = $1
returning id, name, email, phone, role, is_blocked, email_verified, user_verified
`

type VerifySellerByIDRow struct {
	ID            uuid.UUID     `json:"id"`
	Name          string        `json:"name"`
	Email         string        `json:"email"`
	Phone         sql.NullInt64 `json:"phone"`
	Role          string        `json:"role"`
	IsBlocked     bool          `json:"is_blocked"`
	EmailVerified bool          `json:"email_verified"`
	UserVerified  bool          `json:"user_verified"`
}

func (q *Queries) VerifySellerByID(ctx context.Context, id uuid.UUID) (VerifySellerByIDRow, error) {
	row := q.queryRow(ctx, q.verifySellerByIDStmt, verifySellerByID, id)
	var i VerifySellerByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
	)
	return i, err
}

const verifySellerEmailByID = `-- name: VerifySellerEmailByID :one
UPDATE users
SET email_verified = true, updated_at = current_timestamp
WHERE id = $1
RETURNING id, name, email, phone, role, is_blocked, email_verified, user_verified
`

type VerifySellerEmailByIDRow struct {
	ID            uuid.UUID     `json:"id"`
	Name          string        `json:"name"`
	Email         string        `json:"email"`
	Phone         sql.NullInt64 `json:"phone"`
	Role          string        `json:"role"`
	IsBlocked     bool          `json:"is_blocked"`
	EmailVerified bool          `json:"email_verified"`
	UserVerified  bool          `json:"user_verified"`
}

func (q *Queries) VerifySellerEmailByID(ctx context.Context, id uuid.UUID) (VerifySellerEmailByIDRow, error) {
	row := q.queryRow(ctx, q.verifySellerEmailByIDStmt, verifySellerEmailByID, id)
	var i VerifySellerEmailByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
	)
	return i, err
}

const verifyUserByID = `-- name: VerifyUserByID :one
UPDATE users
SET email_verified = true, user_verified = true, updated_at = current_timestamp
WHERE id = $1
RETURNING id, name, email, phone, role, is_blocked, email_verified, user_verified
`

type VerifyUserByIDRow struct {
	ID            uuid.UUID     `json:"id"`
	Name          string        `json:"name"`
	Email         string        `json:"email"`
	Phone         sql.NullInt64 `json:"phone"`
	Role          string        `json:"role"`
	IsBlocked     bool          `json:"is_blocked"`
	EmailVerified bool          `json:"email_verified"`
	UserVerified  bool          `json:"user_verified"`
}

func (q *Queries) VerifyUserByID(ctx context.Context, id uuid.UUID) (VerifyUserByIDRow, error) {
	row := q.queryRow(ctx, q.verifyUserByIDStmt, verifyUserByID, id)
	var i VerifyUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.EmailVerified,
		&i.UserVerified,
	)
	return i, err
}
