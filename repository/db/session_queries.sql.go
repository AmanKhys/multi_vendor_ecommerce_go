// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: session_queries.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createNewSessionByUserID = `-- name: CreateNewSessionByUserID :one
insert into sessions
(user_id) 
values ($1)
returning id, user_id, is_valid, created_at, expires_at
`

func (q *Queries) CreateNewSessionByUserID(ctx context.Context, userID uuid.UUID) (Session, error) {
	row := q.queryRow(ctx, q.createNewSessionByUserIDStmt, createNewSessionByUserID, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsValid,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getAllSessionsByUserID = `-- name: GetAllSessionsByUserID :one
select id, user_id, is_valid, created_at, expires_at from sessions
where user_id = $1
`

func (q *Queries) GetAllSessionsByUserID(ctx context.Context, userID uuid.UUID) (Session, error) {
	row := q.queryRow(ctx, q.getAllSessionsByUserIDStmt, getAllSessionsByUserID, userID)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsValid,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getSessionDetailsByID = `-- name: GetSessionDetailsByID :one
select id, user_id, is_valid, created_at, expires_at from sessions
where id = $1
`

func (q *Queries) GetSessionDetailsByID(ctx context.Context, id uuid.UUID) (Session, error) {
	row := q.queryRow(ctx, q.getSessionDetailsByIDStmt, getSessionDetailsByID, id)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.IsValid,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getUserBySessionID = `-- name: GetUserBySessionID :one
select 
    u.id, 
    u.name, 
    u.email, 
    u.phone, 
    u.role, 
    u.is_blocked, 
    u.gst_no, 
    u.about, 
    u.created_at, 
    u.updated_at
from sessions s
join users u
on s.user_id = u.id
where u.id = $1
`

type GetUserBySessionIDRow struct {
	ID        uuid.UUID      `json:"id"`
	Name      string         `json:"name"`
	Email     string         `json:"email"`
	Phone     int64          `json:"phone"`
	Role      string         `json:"role"`
	IsBlocked bool           `json:"is_blocked"`
	GstNo     sql.NullString `json:"gst_no"`
	About     sql.NullString `json:"about"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) GetUserBySessionID(ctx context.Context, id uuid.UUID) (GetUserBySessionIDRow, error) {
	row := q.queryRow(ctx, q.getUserBySessionIDStmt, getUserBySessionID, id)
	var i GetUserBySessionIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Role,
		&i.IsBlocked,
		&i.GstNo,
		&i.About,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
