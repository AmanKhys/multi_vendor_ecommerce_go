// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addCartItem = `-- name: AddCartItem :one
insert into carts
(user_id, product_id, quantity)
values
($1, $2, $3)
returning id, user_id, product_id, quantity, created_at, updated_at
`

type AddCartItemParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) AddCartItem(ctx context.Context, arg AddCartItemParams) (Cart, error) {
	row := q.queryRow(ctx, q.addCartItemStmt, addCartItem, arg.UserID, arg.ProductID, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCartItemByUserIDAndProductID = `-- name: DeleteCartItemByUserIDAndProductID :exec
delete from carts
where user_id = $1 and product_id = $2
`

type DeleteCartItemByUserIDAndProductIDParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) DeleteCartItemByUserIDAndProductID(ctx context.Context, arg DeleteCartItemByUserIDAndProductIDParams) error {
	_, err := q.exec(ctx, q.deleteCartItemByUserIDAndProductIDStmt, deleteCartItemByUserIDAndProductID, arg.UserID, arg.ProductID)
	return err
}

const editCartItemByID = `-- name: EditCartItemByID :one
update carts
set quantity = $2, updated_at = current_timestamp
where id = $1
returning id, user_id, product_id, quantity, created_at, updated_at
`

type EditCartItemByIDParams struct {
	ID       uuid.UUID `json:"id"`
	Quantity int32     `json:"quantity"`
}

func (q *Queries) EditCartItemByID(ctx context.Context, arg EditCartItemByIDParams) (Cart, error) {
	row := q.queryRow(ctx, q.editCartItemByIDStmt, editCartItemByID, arg.ID, arg.Quantity)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCartItemByUserIDAndProductID = `-- name: GetCartItemByUserIDAndProductID :one
select id, user_id, product_id, quantity, created_at, updated_at from carts
where user_id = $1 and product_id = $2
`

type GetCartItemByUserIDAndProductIDParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) GetCartItemByUserIDAndProductID(ctx context.Context, arg GetCartItemByUserIDAndProductIDParams) (Cart, error) {
	row := q.queryRow(ctx, q.getCartItemByUserIDAndProductIDStmt, getCartItemByUserIDAndProductID, arg.UserID, arg.ProductID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCartItemsByUserID = `-- name: GetCartItemsByUserID :many
select p.name as product_name, c.quantity from carts c
inner join products p
on c.product_id = p.id
where user_id = $1
`

type GetCartItemsByUserIDRow struct {
	ProductName string `json:"product_name"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) GetCartItemsByUserID(ctx context.Context, userID uuid.UUID) ([]GetCartItemsByUserIDRow, error) {
	rows, err := q.query(ctx, q.getCartItemsByUserIDStmt, getCartItemsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsByUserIDRow{}
	for rows.Next() {
		var i GetCartItemsByUserIDRow
		if err := rows.Scan(&i.ProductName, &i.Quantity); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductNameAndQuantityFromCartsByID = `-- name: GetProductNameAndQuantityFromCartsByID :one
select p.name as product_name, c.quantity
from carts c
inner join products p
on c.product_id = p.id
where c.id = $1
`

type GetProductNameAndQuantityFromCartsByIDRow struct {
	ProductName string `json:"product_name"`
	Quantity    int32  `json:"quantity"`
}

func (q *Queries) GetProductNameAndQuantityFromCartsByID(ctx context.Context, id uuid.UUID) (GetProductNameAndQuantityFromCartsByIDRow, error) {
	row := q.queryRow(ctx, q.getProductNameAndQuantityFromCartsByIDStmt, getProductNameAndQuantityFromCartsByID, id)
	var i GetProductNameAndQuantityFromCartsByIDRow
	err := row.Scan(&i.ProductName, &i.Quantity)
	return i, err
}
