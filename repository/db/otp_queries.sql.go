// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: otp_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const addForgotOTPByUserID = `-- name: AddForgotOTPByUserID :one
insert into forgot_otps 
(user_id) values ($1)
returning id, user_id, otp, created_at, expires_at
`

func (q *Queries) AddForgotOTPByUserID(ctx context.Context, userID uuid.UUID) (ForgotOtp, error) {
	row := q.queryRow(ctx, q.addForgotOTPByUserIDStmt, addForgotOTPByUserID, userID)
	var i ForgotOtp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Otp,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const addOTP = `-- name: AddOTP :one
insert into otps
(user_id) values ($1)
returning id, user_id, otp, created_at, expires_at
`

func (q *Queries) AddOTP(ctx context.Context, userID uuid.UUID) (Otp, error) {
	row := q.queryRow(ctx, q.addOTPStmt, addOTP, userID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Otp,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const deleteForgotOTPByEmail = `-- name: DeleteForgotOTPByEmail :exec
delete from forgot_otps
where user_id = (select user_id from users where email = $1)
`

func (q *Queries) DeleteForgotOTPByEmail(ctx context.Context, email string) error {
	_, err := q.exec(ctx, q.deleteForgotOTPByEmailStmt, deleteForgotOTPByEmail, email)
	return err
}

const deleteOTPByEmail = `-- name: DeleteOTPByEmail :execresult
delete from otps
where user_id = (select user_id from users where email = $1)
`

func (q *Queries) DeleteOTPByEmail(ctx context.Context, email string) (sql.Result, error) {
	return q.exec(ctx, q.deleteOTPByEmailStmt, deleteOTPByEmail, email)
}

const getValidForgotOTPByUserID = `-- name: GetValidForgotOTPByUserID :one
select id, user_id, otp, created_at, expires_at from forgot_otps
where user_id  = $1 and expires_at > current_timestamp
order by created_at DESC
limit 1
`

func (q *Queries) GetValidForgotOTPByUserID(ctx context.Context, userID uuid.UUID) (ForgotOtp, error) {
	row := q.queryRow(ctx, q.getValidForgotOTPByUserIDStmt, getValidForgotOTPByUserID, userID)
	var i ForgotOtp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Otp,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const getValidOTPByUserID = `-- name: GetValidOTPByUserID :one
SELECT id, user_id, otp, created_at, expires_at FROM otps
WHERE user_id = $1 and expires_at > current_timestamp
ORDER BY created_at DESC
LIMIT 1
`

func (q *Queries) GetValidOTPByUserID(ctx context.Context, userID uuid.UUID) (Otp, error) {
	row := q.queryRow(ctx, q.getValidOTPByUserIDStmt, getValidOTPByUserID, userID)
	var i Otp
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Otp,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
