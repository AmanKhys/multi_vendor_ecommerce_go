// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: coupon_queries.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const addCoupon = `-- name: AddCoupon :one
insert into coupons
(name, discount_type, trigger_price, discount_amount, start_date, end_date)
values
($1, $2, $3, $4, $5, $6)
returning id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date
`

type AddCouponParams struct {
	Name           string    `json:"name"`
	DiscountType   string    `json:"discount_type"`
	TriggerPrice   float64   `json:"trigger_price"`
	DiscountAmount float64   `json:"discount_amount"`
	StartDate      time.Time `json:"start_date"`
	EndDate        time.Time `json:"end_date"`
}

func (q *Queries) AddCoupon(ctx context.Context, arg AddCouponParams) (Coupon, error) {
	row := q.queryRow(ctx, q.addCouponStmt, addCoupon,
		arg.Name,
		arg.DiscountType,
		arg.TriggerPrice,
		arg.DiscountAmount,
		arg.StartDate,
		arg.EndDate,
	)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountType,
		&i.TriggerPrice,
		&i.DiscountAmount,
		&i.IsDeleted,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const deleteCouponByID = `-- name: DeleteCouponByID :exec
delete from coupons
where id = $1
`

func (q *Queries) DeleteCouponByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteCouponByIDStmt, deleteCouponByID, id)
	return err
}

const deleteCouponByName = `-- name: DeleteCouponByName :one
update coupons
set is_deleted = true
where name = $1
returning id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date
`

func (q *Queries) DeleteCouponByName(ctx context.Context, name string) (Coupon, error) {
	row := q.queryRow(ctx, q.deleteCouponByNameStmt, deleteCouponByName, name)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountType,
		&i.TriggerPrice,
		&i.DiscountAmount,
		&i.IsDeleted,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const editCouponByID = `-- name: EditCouponByID :one
update coupons
set name = $1, discount_type = $2, trigger_price = $3, discount_amount = $4,
start_date = $5, end_date = $6
returning id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date
`

type EditCouponByIDParams struct {
	Name           string    `json:"name"`
	DiscountType   string    `json:"discount_type"`
	TriggerPrice   float64   `json:"trigger_price"`
	DiscountAmount float64   `json:"discount_amount"`
	StartDate      time.Time `json:"start_date"`
	EndDate        time.Time `json:"end_date"`
}

func (q *Queries) EditCouponByID(ctx context.Context, arg EditCouponByIDParams) (Coupon, error) {
	row := q.queryRow(ctx, q.editCouponByIDStmt, editCouponByID,
		arg.Name,
		arg.DiscountType,
		arg.TriggerPrice,
		arg.DiscountAmount,
		arg.StartDate,
		arg.EndDate,
	)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountType,
		&i.TriggerPrice,
		&i.DiscountAmount,
		&i.IsDeleted,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const editCouponByName = `-- name: EditCouponByName :one
update coupons
set name = $1, trigger_price = $2,
 discount_type = $3,
 discount_amount = $4,
 start_date = $5, end_date = $6
where name = $7
returning id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date
`

type EditCouponByNameParams struct {
	NewName        string    `json:"new_name"`
	TriggerPrice   float64   `json:"trigger_price"`
	DiscountType   string    `json:"discount_type"`
	DiscountAmount float64   `json:"discount_amount"`
	StartDate      time.Time `json:"start_date"`
	EndDate        time.Time `json:"end_date"`
	OldName        string    `json:"old_name"`
}

func (q *Queries) EditCouponByName(ctx context.Context, arg EditCouponByNameParams) (Coupon, error) {
	row := q.queryRow(ctx, q.editCouponByNameStmt, editCouponByName,
		arg.NewName,
		arg.TriggerPrice,
		arg.DiscountType,
		arg.DiscountAmount,
		arg.StartDate,
		arg.EndDate,
		arg.OldName,
	)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountType,
		&i.TriggerPrice,
		&i.DiscountAmount,
		&i.IsDeleted,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getAllCoupons = `-- name: GetAllCoupons :many
select id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date from coupons where is_deleted = false
`

func (q *Queries) GetAllCoupons(ctx context.Context) ([]Coupon, error) {
	rows, err := q.query(ctx, q.getAllCouponsStmt, getAllCoupons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coupon{}
	for rows.Next() {
		var i Coupon
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DiscountType,
			&i.TriggerPrice,
			&i.DiscountAmount,
			&i.IsDeleted,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllCouponsForAdmin = `-- name: GetAllCouponsForAdmin :many
select id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date from coupons
`

func (q *Queries) GetAllCouponsForAdmin(ctx context.Context) ([]Coupon, error) {
	rows, err := q.query(ctx, q.getAllCouponsForAdminStmt, getAllCouponsForAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Coupon{}
	for rows.Next() {
		var i Coupon
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.DiscountType,
			&i.TriggerPrice,
			&i.DiscountAmount,
			&i.IsDeleted,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCouponByID = `-- name: GetCouponByID :one
select id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date from coupons
where id = $1
`

func (q *Queries) GetCouponByID(ctx context.Context, id uuid.UUID) (Coupon, error) {
	row := q.queryRow(ctx, q.getCouponByIDStmt, getCouponByID, id)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountType,
		&i.TriggerPrice,
		&i.DiscountAmount,
		&i.IsDeleted,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getCouponByName = `-- name: GetCouponByName :one
select id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date from coupons
where name = $1
`

func (q *Queries) GetCouponByName(ctx context.Context, name string) (Coupon, error) {
	row := q.queryRow(ctx, q.getCouponByNameStmt, getCouponByName, name)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountType,
		&i.TriggerPrice,
		&i.DiscountAmount,
		&i.IsDeleted,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}

const getValidCouponByName = `-- name: GetValidCouponByName :one
select id, name, discount_type, trigger_price, discount_amount, is_deleted, start_date, end_date from coupons
where current_timestamp >= start_date and current_timestamp <= end_date
and name = $1
`

func (q *Queries) GetValidCouponByName(ctx context.Context, name string) (Coupon, error) {
	row := q.queryRow(ctx, q.getValidCouponByNameStmt, getValidCouponByName, name)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.DiscountType,
		&i.TriggerPrice,
		&i.DiscountAmount,
		&i.IsDeleted,
		&i.StartDate,
		&i.EndDate,
	)
	return i, err
}
