// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: address_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addAddressByUserID = `-- name: AddAddressByUserID :one
insert into addresses
(user_id, type, building_name, street_name, town, district, state, pincode)
values
($1, $2, $3, $4, $5, $6, $7, $8)
returning id, user_id, type, building_name, street_name, town, district, state, pincode, created_at, updated_at
`

type AddAddressByUserIDParams struct {
	UserID       uuid.UUID `json:"user_id"`
	Type         string    `json:"type"`
	BuildingName string    `json:"building_name"`
	StreetName   string    `json:"street_name"`
	Town         string    `json:"town"`
	District     string    `json:"district"`
	State        string    `json:"state"`
	Pincode      int32     `json:"pincode"`
}

func (q *Queries) AddAddressByUserID(ctx context.Context, arg AddAddressByUserIDParams) (Address, error) {
	row := q.queryRow(ctx, q.addAddressByUserIDStmt, addAddressByUserID,
		arg.UserID,
		arg.Type,
		arg.BuildingName,
		arg.StreetName,
		arg.Town,
		arg.District,
		arg.State,
		arg.Pincode,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.BuildingName,
		&i.StreetName,
		&i.Town,
		&i.District,
		&i.State,
		&i.Pincode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddressByID = `-- name: DeleteAddressByID :exec
delete from addresses
where id = $1
`

func (q *Queries) DeleteAddressByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAddressByIDStmt, deleteAddressByID, id)
	return err
}

const deleteAddressesByUserID = `-- name: DeleteAddressesByUserID :exec
delete from addresses
where user_id = $1
`

func (q *Queries) DeleteAddressesByUserID(ctx context.Context, userID uuid.UUID) error {
	_, err := q.exec(ctx, q.deleteAddressesByUserIDStmt, deleteAddressesByUserID, userID)
	return err
}

const editAddressByID = `-- name: EditAddressByID :one
update addresses
set building_name = $2, street_name = $3, town = $4, district = $5, state = $6, pincode = $7, updated_at = current_timestamp
where id = $1
returning id, user_id, type, building_name, street_name, town, district, state, pincode, created_at, updated_at
`

type EditAddressByIDParams struct {
	ID           uuid.UUID `json:"id"`
	BuildingName string    `json:"building_name"`
	StreetName   string    `json:"street_name"`
	Town         string    `json:"town"`
	District     string    `json:"district"`
	State        string    `json:"state"`
	Pincode      int32     `json:"pincode"`
}

func (q *Queries) EditAddressByID(ctx context.Context, arg EditAddressByIDParams) (Address, error) {
	row := q.queryRow(ctx, q.editAddressByIDStmt, editAddressByID,
		arg.ID,
		arg.BuildingName,
		arg.StreetName,
		arg.Town,
		arg.District,
		arg.State,
		arg.Pincode,
	)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.BuildingName,
		&i.StreetName,
		&i.Town,
		&i.District,
		&i.State,
		&i.Pincode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressByID = `-- name: GetAddressByID :one
select id, user_id, type, building_name, street_name, town, district, state, pincode, created_at, updated_at from addresses
where id = $1
`

func (q *Queries) GetAddressByID(ctx context.Context, id uuid.UUID) (Address, error) {
	row := q.queryRow(ctx, q.getAddressByIDStmt, getAddressByID, id)
	var i Address
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.BuildingName,
		&i.StreetName,
		&i.Town,
		&i.District,
		&i.State,
		&i.Pincode,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAddressesByUserID = `-- name: GetAddressesByUserID :many
select id, user_id, type, building_name, street_name, town, district, state, pincode, created_at, updated_at from addresses
where user_id = $1
`

func (q *Queries) GetAddressesByUserID(ctx context.Context, userID uuid.UUID) ([]Address, error) {
	rows, err := q.query(ctx, q.getAddressesByUserIDStmt, getAddressesByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Address{}
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.BuildingName,
			&i.StreetName,
			&i.Town,
			&i.District,
			&i.State,
			&i.Pincode,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
