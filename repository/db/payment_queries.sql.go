// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: payment_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addPaymentForCODByUserID = `-- name: AddPaymentForCODByUserID :one
insert into payments
(user_id, method, status, total_amount)
values
($1, 'cod', 'processing', $2)
returning id, user_id, method, status, total_amount, transaction_id, created_at, updated_at
`

type AddPaymentForCODByUserIDParams struct {
	UserID      uuid.UUID `json:"user_id"`
	TotalAmount float64   `json:"total_amount"`
}

func (q *Queries) AddPaymentForCODByUserID(ctx context.Context, arg AddPaymentForCODByUserIDParams) (Payment, error) {
	row := q.queryRow(ctx, q.addPaymentForCODByUserIDStmt, addPaymentForCODByUserID, arg.UserID, arg.TotalAmount)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Method,
		&i.Status,
		&i.TotalAmount,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const editPaymentStatusByID = `-- name: EditPaymentStatusByID :one
update payments
set status = $2, updated_at = current_timestamp
where id = $1
returning id, user_id, method, status, total_amount, transaction_id, created_at, updated_at
`

type EditPaymentStatusByIDParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) EditPaymentStatusByID(ctx context.Context, arg EditPaymentStatusByIDParams) (Payment, error) {
	row := q.queryRow(ctx, q.editPaymentStatusByIDStmt, editPaymentStatusByID, arg.ID, arg.Status)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Method,
		&i.Status,
		&i.TotalAmount,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPayamentByID = `-- name: GetPayamentByID :one
select id, user_id, method, status, total_amount, transaction_id, created_at, updated_at from payments
where id = $1
`

func (q *Queries) GetPayamentByID(ctx context.Context, id uuid.UUID) (Payment, error) {
	row := q.queryRow(ctx, q.getPayamentByIDStmt, getPayamentByID, id)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Method,
		&i.Status,
		&i.TotalAmount,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
