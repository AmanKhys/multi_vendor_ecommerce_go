// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: wallet_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addSavingsToWalletByUserID = `-- name: AddSavingsToWalletByUserID :one
update wallets
set savings = savings + $2, updated_at = current_timestamp
where user_id = $1
returning id, user_id, savings, created_at, updated_at
`

type AddSavingsToWalletByUserIDParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Savings float64   `json:"savings"`
}

func (q *Queries) AddSavingsToWalletByUserID(ctx context.Context, arg AddSavingsToWalletByUserIDParams) (Wallet, error) {
	row := q.queryRow(ctx, q.addSavingsToWalletByUserIDStmt, addSavingsToWalletByUserID, arg.UserID, arg.Savings)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Savings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const addWalletByUserID = `-- name: AddWalletByUserID :one
insert into wallets
(user_id, savings)
values ($1, 0)
returning id, user_id, savings, created_at, updated_at
`

func (q *Queries) AddWalletByUserID(ctx context.Context, userID uuid.UUID) (Wallet, error) {
	row := q.queryRow(ctx, q.addWalletByUserIDStmt, addWalletByUserID, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Savings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWalletByUserID = `-- name: GetWalletByUserID :one
select id, user_id, savings, created_at, updated_at from wallets
where user_id = $1
`

func (q *Queries) GetWalletByUserID(ctx context.Context, userID uuid.UUID) (Wallet, error) {
	row := q.queryRow(ctx, q.getWalletByUserIDStmt, getWalletByUserID, userID)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Savings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const retractSavingsFromWalletByUserID = `-- name: RetractSavingsFromWalletByUserID :one
update wallets
set savings = savings - $2, updated_at = current_timestamp
where user_id = $1
returning id, user_id, savings, created_at, updated_at
`

type RetractSavingsFromWalletByUserIDParams struct {
	UserID  uuid.UUID `json:"user_id"`
	Savings float64   `json:"savings"`
}

func (q *Queries) RetractSavingsFromWalletByUserID(ctx context.Context, arg RetractSavingsFromWalletByUserIDParams) (Wallet, error) {
	row := q.queryRow(ctx, q.retractSavingsFromWalletByUserIDStmt, retractSavingsFromWalletByUserID, arg.UserID, arg.Savings)
	var i Wallet
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Savings,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
