// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: order_queries.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addOrder = `-- name: AddOrder :one
insert into orders
(user_id, shipping_address_id, payment_id)
values ($1, $2, $3)
returning id, user_id, shipping_address_id, payment_id, created_at, updated_at
`

type AddOrderParams struct {
	UserID            uuid.UUID `json:"user_id"`
	ShippingAddressID uuid.UUID `json:"shipping_address_id"`
	PaymentID         uuid.UUID `json:"payment_id"`
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) (Order, error) {
	row := q.queryRow(ctx, q.addOrderStmt, addOrder, arg.UserID, arg.ShippingAddressID, arg.PaymentID)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ShippingAddressID,
		&i.PaymentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByID = `-- name: GetOrderByID :one
select o.user_id, o.id as order_id, o.shipping_address_id, o.payment_id,
(select count(*) from order_items where order_id = o.id)
from orders o
where o.id = $1
`

type GetOrderByIDRow struct {
	UserID            uuid.UUID `json:"user_id"`
	OrderID           uuid.UUID `json:"order_id"`
	ShippingAddressID uuid.UUID `json:"shipping_address_id"`
	PaymentID         uuid.UUID `json:"payment_id"`
	Count             int64     `json:"count"`
}

func (q *Queries) GetOrderByID(ctx context.Context, id uuid.UUID) (GetOrderByIDRow, error) {
	row := q.queryRow(ctx, q.getOrderByIDStmt, getOrderByID, id)
	var i GetOrderByIDRow
	err := row.Scan(
		&i.UserID,
		&i.OrderID,
		&i.ShippingAddressID,
		&i.PaymentID,
		&i.Count,
	)
	return i, err
}
